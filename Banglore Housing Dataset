!pip3 install -U scikit-learn scipy matplotlib
 !pip install sklearn

 # import library
  import pandas as pd
 import seaborn as sns
 import matplotlib.pyplot as plt
  import numpy as np

  # upload csv file
  data=pd.read_csv("Bengaluru_House_Data.csv")
  # take info about dataset
  data.head()         -------------(#to see first 5 rows)
  data.shape          --------------(#to see how many rows and colums in dataset)
  data.info()          -------------( #info of dataset)
  data.isnull().sum()  -------------(#for missing values)


  # clean the dataset
data.drop(columns=['area_type',	'availability',	'society','balcony'],inplace=True)-----(#drop unwanted columns)
data.describe()
data.info()


# Fillup missing values one by one
data['location'].value_counts()
data['location']=data['location'].fillna('sarajapur Road')--------------(## becoz location have only one missing values )
data['size'].value_counts()
data['size']=data['size'].fillna('2 BHK')--------(## has 16 missing values replace 2bhk beoz we have max data in 2bhk)
data['bath']=data['bath'].fillna(data['bath'].median()) --------(# # fill values with median)
data.info()
data['bhk']=data['size'].str.split().str.get(0).astype(int)
data[data.bhk > 20]

# graphical representation
plt.hist(data['price'])
data['total_sqft'].unique()--------(## two ranges (1133-1384) /2 have to fix)

def convertRange(x):
    temp=x.split('-')
    if len(temp) ==2:
        return (float(temp[0]) +float(temp[1]))/2 
    try:
            return float(x)
    except:
            return None

data['total_sqft']=data['total_sqft'].apply(convertRange)
data.head()
data.info()

data['price_per_sqft'] = data['price']*100000 / data['total_sqft']-----(## Price per square feet)
data['price_per_sqft']
plt.hist(data['price_per_sqft'])
plt.hist(data['bhk'])
data['location'].value_counts()

data['location']=data['location'].apply(lambda x: x.strip())
location_counts = data['location'].value_counts()

location_counts
location_counts_less_10 = location_counts[location_counts <=10]
location_counts_less_10

data['location']=data['location'].apply(lambda x:'other' if x in location_counts_less_10 else x)------(## less than 10 location we write other)
data['location'].value_counts()

# outlier detection and removal
data.describe()
(data['total_sqft']/data['bhk']).describe()
data=data[((data['total_sqft']/data['bhk'])>= 300)] -------------(# flat those less than 300sqft we have to remove)
data.describe()
data.shape
data.price_per_sqft.describe()

# remove_outliers

import seaborn as sns
sns.boxplot(data['price_per_sqft'])-------------(#to  detect outliers on graph)

def remove_outliers_sqft(df):
    df_output = pd.DataFrame()
    for key,subdf in df.groupby('location'):
        m = np.mean(subdf.	price_per_sqft)
        
        st = np.std(subdf.price_per_sqft)
        
        gen_df = subdf[(subdf.price_per_sqft > (m-st)) & (subdf.price_per_sqft <= (m+st))]
        df_output=pd.concat([df_output,gen_df],ignore_index=True)
    return df_output
data=remove_outliers_sqft(data)

data.describe()
sns.boxplot(data['price_per_sqft']) 
sns.boxplot(data['bhk'])

def bhk_outlier_remover(df):
    exclude_indices = np.array([])
    for location,location_df in df.groupby('location'):
        bhk_stats = {}
        for bhk, bhk_df in location_df.groupby('bhk'):
            bhk_stats[bhk] ={
                'mean' : np.mean(bhk_df.price_per_sqft),
                'std' : np.std(bhk_df.price_per_sqft),
                'count':bhk_df.shape[0]
            }
        for bhk,bhk_df in location_df.groupby('bhk'):
            stats = bhk_stats.get(bhk-1)
            if stats and stats['count'] >5:
                exclude_indices = np.append(exclude_indices ,bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
        return df.drop(exclude_indices,axis='index')

data=bhk_outlier_remover(data)
data.shape
data
data.drop(columns=['size','price_per_sqft'],inplace=True)


#CREATE NEW CLENED CSV FILE 

data.to_csv('clean_hosing_data.csv',index=False)
data2=pd.read_csv('clean_hosing_data.csv')
data2

  #train and test split

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression,Lasso,Ridge #for lr implimentation 
from sklearn.preprocessing import OneHotEncoder,StandardScaler # for preprocessing
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score

X=data.drop(columns=['price'])
y=data['price']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2 , random_state=45)

print(X_train.shape)
print(X_test.shape)


# applying Linear Regression

column_trans = make_column_transformer((OneHotEncoder(sparse=False),['location']), remainder='passthrough')
column_trans
scaler=StandardScaler()
from sklearn.linear_model import LinearRegression
lr = LinearRegression(positive=True)
pipe = make_pipeline(column_trans ,scaler,lr)
pipe.fit(X_train,y_train)
y_pred_lr=pipe.predict(X_test)
r2_score(y_test,y_pred_lr)

# riged regression

ridge=Ridge()
pipe = make_pipeline(column_trans,scaler, ridge)
pipe.fit(X_train,y_train)

y_pred_ridge=pipe.predict(X_test)
r2_score(y_test,y_pred_ridge)

print ("LR:",r2_score(y_test,y_pred_lr))
print ("Ridge:",r2_score(y_test,y_pred_ridge))
print("Lasso:",r2_score(y_test , y_pred_lasso))

---------------------------------Model accurcy is 72 %---------------------------------------------
